plugins {
    id 'java'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'io.freefair.lombok' version '8.6'
    id 'io.spring.dependency-management' version '1.1.+'
    id "org.jetbrains.kotlin.jvm" version "2.0.+"
    id 'org.springframework.boot' version '3.3.+'
}

repositories { mavenCentral() }
bootRun { jvmArgs(["-Xms2g", "-Xmx2g", "-XX:+ExitOnOutOfMemoryError", "-Djdk.tracePinnedThreads=full"]) }

dependencies {
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.data:spring-data-jpa:3.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.hibernate.orm:hibernate-jcache'
    implementation 'org.hibernate:hibernate-ehcache:5.6.15.Final'
    implementation 'org.ehcache:ehcache:3.10.8'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'io.github.hakky54:logcaptor:2.9.2'
    testImplementation 'io.github.oshai:kotlin-logging-jvm:6.0.9'
    testImplementation 'org.apache.commons:commons-compress:1.26.2'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:postgresql:1.19.8"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

if (System.env.SPRING_PROFILES_ACTIVE in ["platform-tomcat", "loom-tomcat"]) {
    dependencies {
        // Takes precedence over spring-boot-starter-webflux if both on classpath
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
    println 'Added spring-boot-starter-web dependency'
}

test {
    useJUnitPlatform()
    jvmArgs '-XX:+EnableDynamicAgentLoading'
    jvmArgs '-Xshare:off'
}

tasks.withType(Test) {
    ext.failedTests = []
    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            failedTests << ["${descriptor.className}::${descriptor.name}"]
        }
    }
    afterSuite { suite, result ->
        if (!suite.parent) {
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest -> logger.lifecycle("${failedTest}") }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
