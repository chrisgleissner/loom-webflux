name: build
on:
  workflow_call:
    inputs:
      scenarios-path:
        required: false
        type: string
        default: config/scenarios.csv
        description: Path of CSV file with test scenarios
      approaches:
        required: false
        type: string
        default: platform-tomcat,loom-tomcat,loom-netty,webflux-netty
        description: Comma-separated server implementation approaches to test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: corretto
          cache: 'gradle'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update -y
          sudo apt-get install k6        

      - name: Install Python and sysstat
        run: |
          sudo apt-get install -y python3 python3-matplotlib sysstat      

      - name: Build
        run: ./gradlew -q dependencies | grep spring-boot | head -n1 && ./gradlew build jacocoTestReport

      - name: Coveralls
        uses: coverallsapp/github-action@v2

      - name: Benchmark using ${{ inputs.scenarios-path }}
        run: |
          echo "Optimized system for benchmark"
          sudo sysctl -w net.ipv4.ip_local_port_range="1024 65535"
          sudo sysctl -w net.ipv4.tcp_tw_reuse=1          
          sudo sysctl -w fs.file-max=1048576
          sudo sysctl -p
          sysctl net.ipv4.ip_local_port_range net.ipv4.tcp_tw_reuse fs.file-max
          echo "Starting benchmark using scenarios file ${{ inputs.scenarios-path }} and approaches ${{ inputs.approaches }}"
          ./benchmark.sh -a ${{ inputs.approaches }} ${{ inputs.scenarios-path }}

      - name: Show disk use
        run: df -h && du -h

      - name: Verify results
        run: |
          IFS=',' read -ra approach_array <<< "${{ inputs.approaches }}"
          for approach in "${approach_array[@]}"; do
            for scenarioPath in build/results/*; do
              chartFilename=$scenarioPath/$approach.png
              if ! file "$chartFilename" | grep -q "PNG image data"; then
                echo "Verification error: Image $chartFilename missing or invalid"
                exit 1
              else 
                echo "Chart $chartFilename exists"
              fi
            done
          done

      - name: Store results
        uses: actions/upload-artifact@v4
        with:
          name: Results
          path: build/results/
